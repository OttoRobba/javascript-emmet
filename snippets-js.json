{
    "javascript": {
        "snippets": {
            "f": "function ${id}(${cursor}){\n\t${child}\n}\n",
            "af": "var ${id} = function(${cursor}) {\n\t${child}\n};\n",
            "mf": "${id}: function(${cursor}) {\n\t${child}\n},\n",
            "fun": "function ${id}(${cursor}){\n\t${child}\n}\n",
            "afun": "var ${id} = function(${cursor}) {\n\t${child}\n};\n",
            "mfun": "${id}: function(${cursor}) {\n\t${child}\n},\n",
            "iife": "(function() {\n\t\"use strict\";\n${cursor}\n}());\n",
            "for": "for (var ${class} = 0; ${class} < ${id}; ${class}++) {\n\t${child}${cursor}\n}\n",
            "forin": "for (${id} in $${class}) {\n${cursor}${child}\n}",
            "fori": "for (${id} in $${class}) {\n${cursor}${child}\n}",
            "foreach": "${id}.forEach(function(${cursor}){\n\t\n});\n",
            "fore": "${id}.forEach(function(${cursor}){\n\t\n});\n",
            "if": "if (${1:condition}) {\n\t${child}\n}",
            "eif": " else if (${1:condition}) {\n\t${child}\n}",
            "else": " else {\n\t${cursor}${child}\n}",
            "ife": "if (${1:condition}) {\n\t${child}\n} else {\n\t\n}",
            "while": "while (${1:condition}) {\n\t${child}\n}",
            "switch": "switch (${1:expression}){\n${child}\ndefault:\n}",
            "swi": "switch (${1:expression}){\n${child}\ndefault:\n}",
            "case": "case (${1:expression}:\n${child}\nbreak;\n",
            "log": "console.log(${child}${cursor});\n",
            "req": "var ${id} = require(\"${child}${cursor}\");\n",
            "t": "this.",
            "v": "var ${id} = ${cursor}",
            "proto": "prototype.",
            "pro": "prototype.",
            "strict": "\"use strict\";",

            "add": "game.add.${id}(${cursor});\n",
            "arcade": "game.physics.arcade.${id}();\n",
            "asprite": "game.add.sprite(${1:x, y, 'key'});\n",
            "load": "game.load.${id}(${cursor});\n",
            "game": "var game = new Phaser.Game(${cursor});\n",
            "key": "Phaser.Keyboard.${id}",
            "timer": "game.time.events.${id}(${cursor});\n",
            "cursors": "this.cursors = this.game.input.keyboard.createCursorKeys();\n",
            "keycapture": "game.input.keyboard.addKeyCapture(${id});\n"
        }
    }
}
